/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    env: {
        browser: true,
        es6: true,
        node: true,
    },
    extends: [
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:prettier/recommended",
        "prettier/@typescript-eslint",
    ],
    ignorePatterns: [],
    parser: "@typescript-eslint/parser",
    parserOptions: {
        project: "tsconfig.json",
        sourceType: "module",
        ecmaVersion: 2020,
    },
    plugins: ["@typescript-eslint", "@typescript-eslint/tslint"],
    rules: {
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/ban-types": [
            "error",
            {
                types: {
                    Object: {
                        message:
                            "Avoid using the `Object` type. Did you mean `object`?",
                    },
                    Function: {
                        message:
                            "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
                    },
                    Boolean: {
                        message:
                            "Avoid using the `Boolean` type. Did you mean `boolean`?",
                    },
                    Number: {
                        message:
                            "Avoid using the `Number` type. Did you mean `number`?",
                    },
                    String: {
                        message:
                            "Avoid using the `String` type. Did you mean `string`?",
                    },
                    Symbol: {
                        message:
                            "Avoid using the `Symbol` type. Did you mean `symbol`?",
                    },
                },
            },
        ],
        "@typescript-eslint/indent": [
            "warn",
            4,
            {
                FunctionDeclaration: {
                    parameters: "first",
                },
                FunctionExpression: {
                    parameters: "first",
                },
            },
        ],
        "@typescript-eslint/member-delimiter-style": [
            "warn",
            {
                multiline: {
                    delimiter: "semi",
                    requireLast: true,
                },
                singleline: {
                    delimiter: "semi",
                    requireLast: false,
                },
            },
        ],
        "@typescript-eslint/member-ordering": "warn",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/quotes": ["error", "single"],
        "@typescript-eslint/semi": ["warn", "always"],
        "@typescript-eslint/triple-slash-reference": [
            "error",
            {
                path: "always",
                types: "prefer-import",
                lib: "always",
            },
        ],
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        camelcase: "error",
        complexity: "off",
        "constructor-super": "error",
        curly: "error",
        "dot-notation": "error",
        "eol-last": "warn",
        eqeqeq: ["error", "smart"],
        "guard-for-in": "error",
        "id-blacklist": [
            "error",
            "any",
            "Number",
            "number",
            "String",
            "string",
            "Boolean",
            "boolean",
            "Undefined",
            "undefined",
        ],
        "id-match": "error",
        "import/no-deprecated": "warn",
        "jsdoc/check-alignment": "warn",
        "jsdoc/check-indentation": "warn",
        "jsdoc/newline-after-description": "error",
        "jsdoc/no-types": "error",
        "max-classes-per-file": "off",
        "max-len": [
            "error",
            {
                code: 140,
            },
        ],
        "new-parens": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": [
            "error",
            {
                allow: [
                    "log",
                    "warn",
                    "dir",
                    "timeLog",
                    "assert",
                    "clear",
                    "count",
                    "countReset",
                    "group",
                    "groupEnd",
                    "table",
                    "dirxml",
                    "error",
                    "groupCollapsed",
                    "Console",
                    "profile",
                    "profileEnd",
                    "timeStamp",
                    "context",
                ],
            },
        ],
        "no-debugger": "error",
        "no-empty": "off",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-invalid-this": "off",
        "no-new-wrappers": "error",
        "no-restricted-imports": ["error", "rxjs/Rx"],
        "no-shadow": [
            "error",
            {
                hoist: "all",
            },
        ],
        "no-throw-literal": "error",
        "no-trailing-spaces": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "error",
        "no-unsafe-finally": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "prefer-arrow/prefer-arrow-functions": "error",
        "quote-props": ["error", "as-needed"],
        radix: "error",
        "space-before-function-paren": [
            "error",
            {
                anonymous: "never",
                asyncArrow: "always",
                named: "never",
            },
        ],
        "spaced-comment": [
            "error",
            "always",
            {
                markers: ["/"],
            },
        ],
        "use-isnan": "error",
        "valid-typeof": "off",
        "prefer-arrow/prefer-arrow-functions": "warn",
        "@typescript-eslint/tslint/config": [
            "error",
            {
                rules: {
                    "component-class-suffix": true,
                    "contextual-lifecycle": true,
                    "directive-class-suffix": true,
                    "import-spacing": true,
                    "no-conflicting-lifecycle": true,
                    "no-host-metadata-property": true,
                    "no-input-rename": true,
                    "no-inputs-metadata-property": true,
                    "no-output-native": true,
                    "no-output-on-prefix": true,
                    "no-output-rename": true,
                    "no-outputs-metadata-property": true,
                    "template-banana-in-box": true,
                    "template-no-negated-async": true,
                    "use-lifecycle-interface": true,
                    "use-pipe-transform-interface": true,
                    whitespace: true,
                },
            },
        ],
        "@typescript-eslint/await-thenable": ["error"],
        "@typescript-eslint/no-for-in-array": ["error"],
        "@typescript-eslint/no-misused-promises": ["error"],
        "@typescript-eslint/no-unnecessary-type-assertion": ["error"],
        "@typescript-eslint/prefer-includes": ["error"],
        "@typescript-eslint/prefer-regexp-exec": ["error"],
        "@typescript-eslint/prefer-string-starts-ends-with": ["error"],
        "require-await": ["off"],
        "@typescript-eslint/require-await": ["error"],
        "@typescript-eslint/unbound-method": ["error"],
        "no-var": ["error"],
        "prefer-const": ["error"],
        "prefer-rest-params": ["error"],
        "prefer-spread": ["error"],
        "@typescript-eslint/adjacent-overload-signatures": ["error"],
        "@typescript-eslint/ban-ts-ignore": ["error"],
        "@typescript-eslint/camelcase": ["error"],
        "@typescript-eslint/class-name-casing": ["error"],
        "@typescript-eslint/consistent-type-assertions": ["error"],
        "@typescript-eslint/explicit-function-return-type": ["warn"],
        "@typescript-eslint/interface-name-prefix": ["error"],
        "no-array-constructor": ["off"],
        "@typescript-eslint/no-array-constructor": ["error"],
        "no-empty-function": ["off"],
        "@typescript-eslint/no-empty-interface": ["error"],
        "@typescript-eslint/no-inferrable-types": ["error"],
        "@typescript-eslint/no-misused-new": ["error"],
        "@typescript-eslint/no-namespace": ["error"],
        "@typescript-eslint/no-this-alias": ["error"],
        "no-unused-vars": ["off"],
        "@typescript-eslint/no-unused-vars": ["warn"],
        "no-use-before-define": ["off"],
        "@typescript-eslint/prefer-namespace-keyword": ["error"],
        "@typescript-eslint/type-annotation-spacing": ["error"],
    },
    settings: {},
};
